{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the Microbial Genomics Laboratory course for the Spring 2022 semester at The George Washington University! This is a computer-based lab course which will teach you how to use latest and free computational tools to analyze microbial genomes and metagenomes.\n",
    " \n",
    "Detailed course syllabus for the course can be found here: \n",
    "\n",
    "https://github.com/SawLabGW/MicrobialGenomicsLab_Spring2022/blob/main/instructions/pdfs/syllabus.pdf\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## About this documentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This documentation system includes a collection of instructions on computational exercises designed for you throughout the semester. It is impossible to properly display the html pages of these instructions on Blackboard. In order to display the pages correctly, you will need to download the files through our course Github repository, which is located here: \n",
    "\n",
    "https://github.com/SawLabGW/MicrobialGenomicsLab_Spring2022\n",
    "\n",
    "However, in order for you to see this repository, you will need to create a Github account and let me know your username and email used to create an account there. Only then can I add you into the list of people allowed to view the pages and files there.\n",
    "\n",
    "You cannot download the contents of this page just simply through this web address but they need to be \"cloned\" to your computer through a special command known as `git`. We will be setting up these necessary commandline tools during the first week of class.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Agenda for (01/12/2022)\n",
    "\n",
    "  - Introduction to the course\n",
    "  - Setting up your computing environment\n",
    "  - Introduction to Unix/Linux commands\n",
    "  - Install Miniconda\n",
    "  - Install git \n",
    "  - Install Jupyter lab\n",
    "  - Install and test some bioinformatic tools\n",
    "  - Assignments:\n",
    "    - Assignment 1\n",
    "    - Reading assignments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction to the course"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This week, due to the spike in Omicron variant of the SARS-CoV-2, we will be meeting virtually on WebEx.\n",
    "\n",
    "There will be a Powerpoint presentation given over WebEx or Zoom. I will go over the details of how the class will be taught and what platforms we will be using in the Powerpoint presentation but I outline below these for you to remember."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Classroom location"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we're not meeting virtually, we will be meeting physically in the basement of Rome Hall. The classroom is located in **Rome B104**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Where is the virtual classroom?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will be meeting either on **WebEx** and/or **Zoom** platforms, depending on how well they work. WebEx record time stamps of when a person enters and leaves the room so it helps me to use WebEx for recording attendance. Currently, the WebEx link for the class is shown below.\n",
    "\n",
    "https://gwu.webex.com/gwu/j.php?MTID=mf096d6b29554d8fdd2b17519e9ea2357\n",
    "\n",
    "Meeting number: 2624 258 8428\n",
    "\n",
    "Password: ppFmVRME223"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Besides the virtual classroom, what else will we be using?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Besides using either WebEx or Zoom, we will use **Slack** to communicate, discuss, and disseminate information such as reading materials, videos,code snippets, etc. You will get an invitation to join a Slack group created for this course. While Blackboard works fine, due to the cross-listed nature of the course, it becomes very difficult to organize content across both courses on Blackboard. We will use Blackboard for grading and submission of assignments but for sharing of content, we will use Slack.\n",
    "\n",
    "We will also be using **Github** to share certain course content that cannot be easily shared on Blackboard. For example, the computational instructions you are seeing now was shared through a Github repository. Therefore, you will need to create an account on Github website and let me know your account information so that I can add you as a member of the course and you will be able to download course materials.\n",
    "\n",
    "Computational instructions will be updated on a weekly basis and will be available on Wednesday at noon. You will need to use `git pull` command to update course repository and will be able to view the updated instructions each week."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setting up your computing environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Computational exercises you will be performing in this course require operating systems (OS) with Unix or Linux-like commands. This means you needs to set up your environment to make sure those commands are avaiable in a commandline environment, for example a terminal window. It is **crucial** that you set this up correctly/properly as the course heavily relies on tools that need to be run in command line environment.\n",
    "\n",
    "The following sets of instructions will help you to set up your environment correctly to make sure that these sets of commands are available. If you are already using Linux or Unix operating system (OS), then you are all set. If not, you will want to follow the instructions to configure your environment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Windows OS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your Windows OS should already come installed with Windows Powershell (if the OS version is fairly recent), which you will need for the following instructions.\n",
    "\n",
    "You will need to turn on Windows Subsystem for Linux (WSL) feature on in order to enable and run Unix/Linux commands natively on Windows operating system. You can follow instructions on this page on how to set up and configure your Windows OS to enable Unix commands:\n",
    "\n",
    "https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/\n",
    "\n",
    "and here:\n",
    "\n",
    "https://docs.microsoft.com/en-us/windows/wsl/install-win10\n",
    "\n",
    "Please follow the instructions shown in both pages I have referred to above. WSL would allow you to use `bash` and Unix commands natively in Windows OS. You will also have an opportunity to install a Linux distribution as shown in both pages. I would highly recommend that you choose Ubuntu as the distribution as it is more widely used and has more user support than other distributions. \n",
    "\n",
    "Briefly, the steps described in those two websites involve the following:\n",
    "\n",
    "- enabling WSL on Windows Features\n",
    "- installing a Linux distribution system (Ubuntu, for example) on Windows\n",
    "\n",
    "Some instructions require that you run the Windows Powershell in administrator mode. To do that, you need to right click on the Windows Powershell icon to display other options and select the option that says \"run as Admin\" or something similar.\n",
    "\n",
    "Setting up the command line environment for Windows can be a bit challenging compared to Mac OS but it is not impossible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mac OS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Setting up the command line environment in Mac is a lot easier as Mac OS evolved from BSD, which is an offshoot of earlier Unix operating systems. Consequently, there are more Unix-like tools already built into the operating system. Nevertheless, it is not quite the usual GNU Unix/Linux type of commands you might want to use. In order to set up the environment correctly, follow the instructions below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This website has pretty good instructions (although a bit old) on how to set up the command line environement without having to install the whole Xcode, which is usually a precursor needed to install command line tools and requires a large space.\n",
    "\n",
    "https://mac-how-to.gadgethacks.com/how-to/install-command-line-developer-tools-without-xcode-0168115/\n",
    "\n",
    "Basically, you would first:\n",
    "\n",
    "1. Open your terminal\n",
    "1. Then type this: ```xcode-select --install```\n",
    "1. Then follow the instructions from the pop-up windows and it should install the necessary tools for the command line environment.\n",
    "\n",
    "A few additional websites on how to set up the command line environment on Mac OS are shown below:\n",
    "\n",
    "https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/\n",
    "\n",
    "https://www.maketecheasier.com/install-command-line-tools-without-xcode/\n",
    "\n",
    "Once the steps shown in these pages are followed, your command line environment should be ready for this course."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install Homebrew"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, you want to install Homebrew, which allows you to use the `brew` command on your Mac OS terminal. It is a package managing system that allows you to install basic utilities and even some bioinformatics tools on your Mac without needing admin privileges. \n",
    "\n",
    "- First, go here and follow the instructions: (https://docs.brew.sh/Installation)\n",
    "- Open your terminal\n",
    "- Then type: \n",
    "\n",
    "```\n",
    "cd\n",
    "\n",
    "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n",
    "\n",
    "brew install coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep\n",
    "```\n",
    "\n",
    "The first `cd` commands takes you back to your home directory where you want to be installing Homebrew. The rest of the commands shown will install GNU Unix commands, which are different from original Unix-like commands that come installed with Mac OS.\n",
    "\n",
    "Once Homebrew is installed, it will be very easy to install other tools such as `git`, which you will need to check out the course Github code repository and see the instructions. Remember, `brew` command is your best friend on any Mac OS to install and configure tools you would need for pretty much anything."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unix and commandline environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will be learning how to use bioinformatic tools that run in command line environment. Part of being able to run these tools require at least some basic knowledge of Unix (or Linux) commands. In this Wiki page, I will explain how to use some of these commands but not all of it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Useful list of commands"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This website has a handy list of Unix/Linux commands you will be using mostly.\n",
    "\n",
    "https://files.fosswire.com/2007/08/fwunixref.pdf\n",
    "\n",
    "I will display it below for a quick preview but you should download it from the url listed above for your reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"800\"\n",
       "            height=\"800\"\n",
       "            src=\"https://files.fosswire.com/2007/08/fwunixref.pdf\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x104824c90>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import IFrame\n",
    "\n",
    "IFrame(\"https://files.fosswire.com/2007/08/fwunixref.pdf\", width=800, height=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, it categorized commands by the type of activity such as working with files or checking processes. Please learn these commands as they are some of the most basic commands any bioinformaticians can use. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Unix commands"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, before you can start using these sets of commands, you must have set up your computing environment to install basic utilities that allow you to use these commands. Make sure you refer to the section on \"Setting up your computing environment\" to make sure you have correctly set up the environment. You will need to use a terminal or Jupyter-lab to be able to use Unix commands.\n",
    "\n",
    "Mac OS typically comes with a terminal application installed and you will need to look through your list of applications. On Windows, you will need to use the Linux Subsystem with an Ubuntu (or a different Linux) distribution installed in order for you to use a terminal. Terminal on Mac OS looks something like this:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Terminal](images/term.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Navigating between directories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To navigate between folders, the most basic command you can use is `cd`, which means to change directory to something. First, before you do anything, to see where you are located, type `pwd`. `pwd` stands for print working directory. For example, if I were to type this in my terminal (using Jupyter-lab as an interface), you would see something like this (ignore the first line that says `%%bash`. It is for Jupyter-lab environment, which I will talk about a little later):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/jsaw\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "cd\n",
    "pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, typing the `cd` command without any parameters brings you to your \"Home\" directory in any Unix-like environment. Here, my home directory is \"jsaw\" under \"Users\". If I want to navigate into a folder under \"jsaw\" named \"tools\", then I would type:\n",
    "\n",
    "`cd tools`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/jsaw/tools\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "cd \n",
    "cd tools\n",
    "pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, I'm in a folder named \"tools\". If I want to go back up one folder into \"jsaw\", then I would type:\n",
    "\n",
    "`cd ..`\n",
    "\n",
    "The two dots mean I want to go back up to a higher ranking folder than current one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating and removing directories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, first thing for you to do is to navigate to your home directory and create 4 folders named as `tools`, `repositories`, `data`, and `exercises`.\n",
    "\n",
    "Type in your terminal:\n",
    "\n",
    "```bash\n",
    "cd\n",
    "mkdir tools repositories data exercises\n",
    "ls\n",
    "```\n",
    "\n",
    "The `mkdir` command means \"make directory\" and it will create a directory after the `mkdir` command.\n",
    "\n",
    "The `ls` command means list the contents of a directory. When you type this command in your home folder, you will see a bunch of folders such as \"Documents\", \"Downloads\", etc, in addition to the 4 folders you have just created. You will be using these folders for the following purposes:\n",
    "\n",
    "- tools (any software tools that I might make you download and install prior to exercises)\n",
    "- repositories (this is where you will \"clone\" the course repository into, or any other public repositories of interest)\n",
    "- data (this is where you will store data that we will be using in the class)\n",
    "- exercises (this is a folder for you to do your course exercies and assignments)\n",
    "\n",
    "**Warning:** Unix/Linux commands are case-sensitive, which means you need to type exactly as shown. If you type `Ls instead of ls`, the command is not going to work. Next, you also want to make sure that files and folder names do not have *any* spaces between them. This will avoid a lot of headaches down the line. For example, if you were to create a folder name \"My Folder\" by typing `mkdir My Folder`, it will create two separate folders named \"My\" and \"Folder\" instead of what you have intended."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Copying, renaming, and moving files/folders"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To copy one file to another location, you can type something like this:\n",
    "\n",
    "`cp file.txt some_folder/`\n",
    "\n",
    "And this command will copy the `file.txt` file into the `some_folder` folder. If you want to rename the `file.txt` into `file2.txt`, then type:\n",
    "\n",
    "`mv file.txt file2.txt`\n",
    "\n",
    "You can use the same syntax to rename folders. For example if you want to rename the `some_folder` into `my_folder`, then type:\n",
    "\n",
    "`mv some_folder my_folder` "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing/deleting files/folders"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to delete a file or folder, you type something like this:\n",
    "\n",
    "`rm file.txt`\n",
    "\n",
    "The `rm` command will remove the file. To remove a directory, you can either type `rmdir or rm` commands depending on whether the folder is empty or not. If the folder is not empty (has some files in it), you will need to type something like this:\n",
    "\n",
    "`rm -rf non_empty_directory`\n",
    "\n",
    "**Warning:** Be very careful with the `rm -rf` command. It will not ask you for confirmation on whether you *really* want to remove something. It will just silently carry out the task. You do not want to accidentally remove anything important using this command. A lot of people have learned this the hard way and they may shout and scream and pull their hair out after realizing what they have done."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### File permissions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a related note, you want to learn how to set permissions to files and folders so that other people can (or cannot) read/write/excute/delete or mess them up in anyway. For now, you are working on your own so this is not an issue, but on servers where you work with multiple people and groups, this is very important. If you type `ls -la` in your terminal, you will see something like this:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Terminal](images/term.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, you will notice that files (such as \"README.md\") has some funny notations at the very beginning. These are file permissions. I have shown below what these mean."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Permissions](images/permissions.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, the first character shows the type of file. If it is a file, you will see a \"-\" but if it is a directory, you will see a \"d\".\n",
    "\n",
    "The `r w and x` following the first position mean read, write, and execute permissions for the owner (that is you, if you created this file). This means you have read/write/execute permissions for this file. If you're missing a letter and instead have an \"-\" means you don't have that permission. For example, if you want to remove the \"read\" permission of a file to others beside you and group members, you type like this:\n",
    "\n",
    "`chmod o-r file.txt`\n",
    "\n",
    "The `chmod` is the command for changing permissions. The `o-r` means you are removing (a minus sign) read permissions to others `o`. If you want to add write permission to group members, then you type something like this:\n",
    "\n",
    "`chmod g+w file.txt`\n",
    "\n",
    "The `g+w` means you are adding the write permission for group members. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are some of the very basic Unix commands for you to learn for now. We will revisit and talk more about additional commands that will become necessary as the course progresses."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Install and configure Miniconda and Bioconda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Go here to download Miniconda package manager: https://docs.conda.io/en/latest/miniconda.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Install Miniconda\n",
    "Follow instructions for both Mac and Windows. Choose Python 3.7 version. \n",
    "\n",
    "For **Mac**, I recommend you download the “pkg” version which is a graphical version of the installer.\n",
    "\n",
    "For **Windows/WSL**, open your Ubuntu shell (right-click on the icon and run as Administrator). Then type:\n",
    "\n",
    "```bash\n",
    "cd /mnt/c\n",
    "mkdir tools\n",
    "cd tools\n",
    "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n",
    "chmod +x Miniconda3-latest-Linux-x86_64.sh\n",
    "./Miniconda3-latest-Linux-x86_64.sh\n",
    "```\n",
    "\n",
    "Follow the instructions along and make sure you say \"yes\" at the very end when it asked you if you want the installer to prepend it to path.\n",
    "\n",
    "You can visit this page for more tips on how to instlall Miniconda on WSL.\n",
    "\n",
    "https://gist.github.com/kauffmanes/5e74916617f9993bc3479f401dfec7da\n",
    "\n",
    "**After installation:**\n",
    "\n",
    "For **Mac**:\n",
    "\n",
    "Close your terminal and open it again. Try typing `conda` to see if the command works. You will see a bunch of options you can type with the conda command.\n",
    "\n",
    "\n",
    "For **Windows**:\n",
    "\n",
    "Close your Ubuntu shell, then restart it by right-cliking on the Ubuntu icon and run it as Administrator. Try typing `conda` to see if it shows options.\n",
    "\n",
    "### Install Bioconda\n",
    "\n",
    "After Miniconda is installed, you will need to configure Bioconda channels. Bioconda allows you to install *most* bioinformatics tools with ease without learning to use compilers or to figure out software dependencies.\n",
    "\n",
    "Install bioconda by typing the following commands in your terminal:\n",
    "\n",
    "```\n",
    "conda config --add channels defaults\n",
    "conda config --add channels bioconda\n",
    "conda config --add channels conda-forge\n",
    "```\n",
    "\n",
    "These commands will add bioinformatics related tools “channels” to miniconda. Now, you should be able to search and install tools locally on your computer. Try install jupyter first.\n",
    "\n",
    "```\n",
    "conda search jupyter\n",
    "conda install jupyter\n",
    "\n",
    "conda search jupyterlab\n",
    "conda install jupyterlab\n",
    "```\n",
    "\n",
    "After you have configured the bioconda channels, most of the bioinformatics tools we will use in this course should be available for installation through `conda`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Git and Github"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is git?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Git is a tool for version control that allows you to track changes so that you can work collaboratively in a team environment. A lot of software developers and engineers use it but scientists also use it to maintain their software/code generated for research. Although I will cover some basics on using Git, you will need to read up on what it is and how to use it at your own time. See here for more information:\n",
    "\n",
    "https://guides.github.com/introduction/git-handbook/\n",
    "\n",
    "Here is another resource on Git. It is for Bitbucket repository but command examples are the same as what you would be using with Github.\n",
    "\n",
    "https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to install Git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, you will try to install `git` tool through command line tools such as Homebrew on Mac.\n",
    "\n",
    "On **Mac OS**, you will type like this in your terminal: `brew install git`\n",
    "\n",
    "On **Windows OS** running **Linux** subsystem with **Ubuntu**, you can type something like this in your terminal: `apt-get install git`\n",
    "\n",
    "And this will install the tool on your command line environment. You may need root privileges to install tools on Ubuntu. If this happens, you just type: `sudo apt-get install git` and it should work. You will have to type your password though.\n",
    "\n",
    "Another way of installing `git` is to use your Miniconda package managing system. It is actually my preferred method of installing new tools in my commandline environment. If you have set up Miniconda correctly, then you can just type:\n",
    "\n",
    "`conda install git` in either Mac or Windows OS terminal and this would install `git` on your system. Here is an example of what you will see when you use Miniconda to search if git is in its list of packages that you can install through `conda` command."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading channels: ...working... done\n",
      "# Name                       Version           Build  Channel             \n",
      "git                           2.12.2               4  conda-forge         \n",
      "git                           2.13.3               0  conda-forge         \n",
      "git                           2.14.1               0  conda-forge         \n",
      "git                           2.14.1               1  conda-forge         \n",
      "git                           2.14.1 pl526ha558ef4_2  pkgs/main           \n",
      "git                           2.14.1 pl526hcdafd81_2  pkgs/main           \n",
      "git                           2.14.2               0  conda-forge         \n",
      "git                           2.14.2               1  conda-forge         \n",
      "git                           2.14.2               2  conda-forge         \n",
      "git                           2.14.2               3  conda-forge         \n",
      "git                           2.15.0 pl526h6165b5f_0  pkgs/main           \n",
      "git                           2.16.1      h74bb3f6_0  pkgs/main           \n",
      "git                           2.16.1 pl526h74bb3f6_1  pkgs/main           \n",
      "git                           2.17.0 pl526h028e6c8_0  pkgs/main           \n",
      "git                           2.17.1               0  conda-forge         \n",
      "git                           2.17.1 pl526h028e6c8_0  pkgs/main           \n",
      "git                           2.18.0               0  conda-forge         \n",
      "git                           2.18.0 pl526h028e6c8_0  pkgs/main           \n",
      "git                           2.18.0 pl526hbb17d3c_1  conda-forge         \n",
      "git                           2.19.0 pl526hbb17d3c_0  conda-forge         \n",
      "git                           2.19.1 pl526h028e6c8_0  pkgs/main           \n",
      "git                           2.19.1 pl526h28b1069_1000  conda-forge         \n",
      "git                           2.19.1 pl526h28b1069_1001  conda-forge         \n",
      "git                           2.19.1 pl526h6951d83_0  pkgs/main           \n",
      "git                           2.19.1 pl526hbb17d3c_0  conda-forge         \n",
      "git                           2.19.1 pl526hbb17d3c_1  conda-forge         \n",
      "git                           2.19.2 pl526h28b1069_1000  conda-forge         \n",
      "git                           2.19.2 pl526hbb17d3c_0  conda-forge         \n",
      "git                           2.20.0 pl526h28b1069_1000  conda-forge         \n",
      "git                           2.20.0 pl526hbb17d3c_0  conda-forge         \n",
      "git                           2.20.1 pl526h28b1069_1000  conda-forge         \n",
      "git                           2.20.1 pl526h28b1069_1001  conda-forge         \n",
      "git                           2.20.1 pl526h3e3e3d1_1002  conda-forge         \n",
      "git                           2.20.1 pl526h6951d83_0  pkgs/main           \n",
      "git                           2.20.1 pl526hbb17d3c_0  conda-forge         \n",
      "git                           2.21.0 pl526h3e3e3d1_0  conda-forge         \n",
      "git                           2.22.0 pl526hbdf3604_0  conda-forge         \n",
      "git                           2.23.0 pl526h6951d83_0  pkgs/main           \n",
      "git                           2.23.0 pl526hbdf3604_0  conda-forge         \n",
      "git                           2.23.0 pl526hbdf3604_1  conda-forge         \n",
      "git                           2.23.0 pl526hbdf3604_2  conda-forge         \n",
      "git                           2.24.0 pl526hdc91d69_0  conda-forge         \n",
      "git                           2.24.0 pl526hdc91d69_1  conda-forge         \n",
      "git                           2.25.0 pl526hdc91d69_0  conda-forge         \n",
      "git                           2.26.0 pl526h561ab23_0  conda-forge         \n",
      "git                           2.26.1 pl526hcc376a2_0  conda-forge         \n",
      "git                           2.26.2 pl526hcc376a2_0  conda-forge         \n",
      "git                           2.27.0 pl526hcc376a2_0  conda-forge         \n",
      "git                           2.28.0 pl526hde3ca24_0  conda-forge         \n",
      "git                           2.28.0 pl526hde3ca24_1  conda-forge         \n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "conda search git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cloning course repository on Github"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a member of the Microbial Genomics Lab 2022, you will have access to our code repository.\n",
    "\n",
    "If you log in to Github and visit this URL: \n",
    "\n",
    "https://github.com/SawLabGW/MicrobialGenomicsLab_Spring2022\n",
    "\n",
    "you will be able to download the code repository to your laptop. First, if you haven't already downloaded the code repository to your drive, you want to \"clone\" it.\n",
    "\n",
    "First, create a folder where you would want to store this repository. For example, in your command line environment, type `cd` to go back to your home directory. Then to create a folder named \"repositories\". \n",
    "\n",
    "Type: `mkdir repositories`\n",
    "\n",
    "Then go into that folder by typing: `cd repositories`.\n",
    "\n",
    "Then type: `git clone https://github.com/SawLabGW/MicrobialGenomicsLab_Fall2020.git`\n",
    "\n",
    "Now, you will see the folder \"MicrobialGenomicsLab_Spring2022\" in the repositories folder."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Committing to the repository"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, if you have a new file named text.txt which created and you want to make it part of the repository, you will need to type the command git add text.txt. You may type this command in the folder that this file is located or from the root folder. If it is in a subfolder named alison/notes/text.txt, then you want to type git add alison/notes/text.txt in the root folder.\n",
    "\n",
    "After adding the file, you will need to type the following command.\n",
    "\n",
    "`git commit -a`\n",
    "\n",
    "It will bring up the vim editor, which will prompt you to enter a message before you can commit this file to the repository. If you would rather bypass this step, you can specify in your previous git command like this:\n",
    "\n",
    "`git commit -m \"created a new file\"`\n",
    "\n",
    "Here, you have put in quotes the text you wanted to convey along with the commit command to let people know that you have created a new file and added it to the repository. This helps your teammates and collaborators keep track of what you did to the repository.\n",
    "\n",
    "Finally, type `git push origin master` to \"push\" your changes to the repository.\n",
    "\n",
    "Before committing or pushing anything to the repository, you should always type `git pull origin master` to get the latest updated version of the repository. This is because there is a built-in check for people to prevent overwriting things or missing something if someone else had made a very recent commit to the repository. \n",
    "\n",
    "**Note:** The repository you just downloaded is read-only and you cannot add or remove files from it. We will discuss how to create your own repositories later in the semester."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Install Jupyter and Jupyter-lab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will make extensive use of Jupyter-lab to document work and to take notes. You will also need to use Jupyter-lab as a notebook that you will submit at the end of the semester for your final project. To install them, type in your terminal:\n",
    "\n",
    "`conda install jupyter`\n",
    "\n",
    "and\n",
    "\n",
    "`conda install jupyterlab`\n",
    "\n",
    "You will have to type \"y\" when you are prompted for confirmation after typing these commands. Now these tools should be installed in your command line environment.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to use Jupyter-lab?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will be demonstrating its use during class."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tools to install for next week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using `conda`, you will need to install a few tools that we will be using during class next week. The tools are:\n",
    "\n",
    "- sra-tools\n",
    "- fastqc\n",
    "- bbmap\n",
    "\n",
    "Using examples I have shown above, search and install these three tools on your computer.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
